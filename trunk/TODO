http://pdos.csail.mit.edu/~baford/packrat/http://www.codeproject.com/KB/recipes/grammar_support_1.aspxhttp://www.replicator.org/node/67http://www.codeplex.com/ironyhttp://www.eqatec.com/tools/profilerhttp://code.google.com/p/nprof/ms (but team version)http://www.wikihow.com/Optimize-Your-Program%27s-Performancehttp://stackoverflow.com/questions/375913/what-can-i-use-to-profile-c-code-in-linux/378024#378024http://www.thinkingparallel.com/2007/04/18/ten-questions-with-joe-duffy-about-parallel-programming-and-net-threads/28.947 secs28.7 secs* Try reworking ftests:	- program should include tests, use double-quotes	- get rid of the obsolete stuff in the ftest directories	- make sure that the various options work	- make sure clean gets rid of the generated files	- get rid of ftester.py	- can we (for testing at least) specify both c# and f# in the peg files?		'f#'`blah` 'c#'`stuff`* Work on better language support:	- need a language setting	- some setting are language specific	- add a warning for ignored setting	- may want a --silent option	- update the grammar in the template readme	- add support for c++ (use member function pointers)	- add support for f#* May want to talk about SS.* Might want some tips & techniques ftests.* Might be neat to allow peg-sharp to create dot files (using graphviz)* May want to rewrite the readme using asciidoc.* Do a release.* Update the wiki (eg c++ and f# support)* Maybe also rtf generation* Look into optionally generating c++ code.* Might want to consolidate ftests into a single executable.* Do a release.* Should there be an explicit way to match eot?* Might be nice to add some support for error recovery so multiple parse errors can be   reported. See Bison's simple error recovery.* Would be nice to support #if stuff.* May want to support utf-16 (could look for zeros or a bom).* Might want a --setting switch. Should override earlier switches and peg file settings.* Allow arbitrary sequences (instead of just strings) to be parsed?* Would be nice if we could do optimizations like rule inlining but this is tricky with the   way we handle semantic actions (they are attached to rules not expressions, rely on   the order of expressions within the rule, and default to returning the value of the   first subrule).* Release checklist:	- make sure the csproj has the right version	- make sure sln still builds	