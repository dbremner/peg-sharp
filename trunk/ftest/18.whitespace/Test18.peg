# This test is designed to exercise rule hooks.# It does this with a grammar for a language with significant whitespace (like Python).# Unlike Python we only allow spaces for indentation.start = Programvalue = Nodeusing = System.Linqdebug = noneFunction := 'def' S Identifier ':' S Statements		`value = new FunctionNode(results[1].Text.Trim(), results[3].Value)`Keywords := ('def') ![a-zA-Z0-9];IfStatement := 'if' S Identifier ':' S Statements	`value = new IfNode(results[1].Text.Trim(), results[3].Value)`Identifier := !Keywords [a-zA-Z] [a-zA-Z0-9]* S;PassStatement := 'pass' S								`value = new PassNode()`Program := Function+									`value = new ProgramNode(from r in results where r.Value != null select r.Value)`S := Space* 												`text = null`  # We use a separate space rule because x* always succeeds.Space := [ \t\r\n];Statement :<	`if (!DoIndentMatches(_state.Index))		fail = "indentation";`Statement := IfStatement / PassStatement;Statements :<	`int oldIndent = m_indent;	if (!DoAdjustIndent(_state.Index))		fail = "indentation";`Statements := Statement+							`value = new BlockNode(from r in results where r.Value != null select r.Value)`Statements :>	`DoRestoreIndent(oldIndent)`