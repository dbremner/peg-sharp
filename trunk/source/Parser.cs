// Machine generated by peg-sharp 0.3.364.0 from source/Parser.peg.
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Security.Permissions;

[Serializable]
internal sealed class ParserException : Exception
{
	public ParserException()
	{
	}
	
	public ParserException(string message) : base(message)
	{
	}
	
	public ParserException(int line, int col, string file, string message) : base(string.Format("{0} at line {1} col {2}{3}", message, line, col, file != null ? (" in " + file) : "."))
	{
	}
	
	public ParserException(int line, int col, string file, string format, params object[] args) : this(line, col, file, string.Format(format, args))
	{
	}
	
	public ParserException(int line, int col, string file, string message, Exception inner) : base(string.Format("{0} at line {1} col {2}{3}", message, line, col, file != null ? (" in " + file) : "."), inner)
	{
	}
	
	[SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)]
	private ParserException(SerializationInfo info, StreamingContext context) : base(info, context)
	{
	}
}

// Thread safe if Parser instances are not shared across threads.
internal sealed partial class Parser
{
	public Parser()
	{
		m_nonterminals.Add("Action", new ParseMethod[]{this.DoParseActionRule});
		m_nonterminals.Add("Any", new ParseMethod[]{this.DoParseAnyRule});
		m_nonterminals.Add("AssertExpression", new ParseMethod[]{this.DoParseAssertExpression1Rule, this.DoParseAssertExpression2Rule, this.DoParseAssertExpression3Rule});
		m_nonterminals.Add("Comment", new ParseMethod[]{this.DoParseCommentRule});
		m_nonterminals.Add("Expression", new ParseMethod[]{this.DoParseExpressionRule});
		m_nonterminals.Add("Identifier", new ParseMethod[]{this.DoParseIdentifierRule});
		m_nonterminals.Add("Integer", new ParseMethod[]{this.DoParseIntegerRule});
		m_nonterminals.Add("Literal", new ParseMethod[]{this.DoParseLiteral1Rule, this.DoParseLiteral2Rule});
		m_nonterminals.Add("PegFile", new ParseMethod[]{this.DoParsePegFileRule});
		m_nonterminals.Add("PostfixExpression", new ParseMethod[]{this.DoParsePostfixExpression1Rule, this.DoParsePostfixExpression2Rule, this.DoParsePostfixExpression3Rule, this.DoParsePostfixExpression4Rule, this.DoParsePostfixExpression5Rule, this.DoParsePostfixExpression6Rule});
		m_nonterminals.Add("PrimitiveExpression", new ParseMethod[]{this.DoParsePrimitiveExpressionRule});
		m_nonterminals.Add("Range", new ParseMethod[]{this.DoParseRangeRule});
		m_nonterminals.Add("Rule", new ParseMethod[]{this.DoParseRuleRule});
		m_nonterminals.Add("S", new ParseMethod[]{this.DoParseSRule});
		m_nonterminals.Add("SequenceExpression", new ParseMethod[]{this.DoParseSequenceExpressionRule});
		m_nonterminals.Add("Setting", new ParseMethod[]{this.DoParseSetting1Rule, this.DoParseSetting2Rule});
		m_nonterminals.Add("Space", new ParseMethod[]{this.DoParseSpaceRule});
		m_nonterminals.Add("SubExpression", new ParseMethod[]{this.DoParseSubExpressionRule});
		m_nonterminals.Add("SubRule", new ParseMethod[]{this.DoParseSubRuleRule});
		m_nonterminals.Add("Value", new ParseMethod[]{this.DoParseValueRule});
		OnCtorEpilog();
	}
	
	public Expression Parse(string input)
	{
		return Parse(input, null);
	}
	
	// File is used for error reporting.
	public Expression Parse(string input, string file)
	{
		m_file = file;
		m_input = m_file;				// we need to ensure that m_file is used or we will (in some cases) get a compiler warning
		m_input = input + "\x0";	// add a sentinel so we can avoid range checks
		m_cache.Clear();
		
		State state = new State(0, true);
		var results = new List<Result>();
		
		OnParseProlog();
		state = DoParse(state, results, "PegFile");
		
		int i = state.Index;
		if (!state.Parsed)
			DoThrow(state.Errors.Index, state.Errors.ToString());
		else if (i < input.Length)
			if (state.Errors.Expected.Length > 0)
				DoThrow(state.Errors.Index, state.Errors.ToString());
			else
				DoThrow(state.Errors.Index, "Not all input was consumed starting from '" + input.Substring(i, Math.Min(16, input.Length - i)) + "'");
		OnParseEpilog(state);
		
		return results[0].Value;
	}
	
	#region Non-Terminal Parse Methods
	// Action := '`' [^`]+ '`'
	private State DoParseActionRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParseLiteral(s, r, "`"),
			(s, r) => DoRepetition(s, r, 1, 2147483647,
				(s2, r2) => DoParseRange(s2, r2, true, "`", string.Empty, null, "[^`]")),
			(s, r) => DoParseLiteral(s, r, "`"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Any := '.' S
	private State DoParseAnyRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParseLiteral(s, r, "."),
			(s, r) => DoParse(s, r, "S"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = new RangeExpression("\x0001-\xFFFF");
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// AssertExpression := '&' PostfixExpression
	private State DoParseAssertExpression1Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParseLiteral(s, r, "&"),
			(s, r) => DoParse(s, r, "PostfixExpression"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = new AssertExpression(results[1].Value);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// AssertExpression := '!' PostfixExpression
	private State DoParseAssertExpression2Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParseLiteral(s, r, "!"),
			(s, r) => DoParse(s, r, "PostfixExpression"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = new NAssertExpression(results[1].Value);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// AssertExpression := PostfixExpression
	private State DoParseAssertExpression3Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoParse(_state, results, "PostfixExpression");
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Comment := '#' [^\n\r]* S
	private State DoParseCommentRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParseLiteral(s, r, "#"),
			(s, r) => DoRepetition(s, r, 0, 2147483647,
				(s2, r2) => DoParseRange(s2, r2, true, "\n\r", string.Empty, null, "[^\n\r]")),
			(s, r) => DoParse(s, r, "S"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "comment";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// Expression := SequenceExpression ('/' S SequenceExpression)*
	private State DoParseExpressionRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParse(s, r, "SequenceExpression"),
			(s, r) => DoRepetition(s, r, 0, 2147483647,
				(s2, r2) => DoSequence(s2, r2,
					(s3, r3) => DoParseLiteral(s3, r3, "/"),
					(s3, r3) => DoParse(s3, r3, "S"),
					(s3, r3) => DoParse(s3, r3, "SequenceExpression"))));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = DoChoice(results);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Identifier := [a-zA-Z] [_-a-zA-Z0-9]* S
	private State DoParseIdentifierRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParseRange(s, r, false, string.Empty, "azAZ", null, "[a-zA-Z]"),
			(s, r) => DoRepetition(s, r, 0, 2147483647,
				(s2, r2) => DoParseRange(s2, r2, false, "_-", "azAZ09", null, "[_-a-zA-Z0-9]")),
			(s, r) => DoParse(s, r, "S"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "identifier";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// Integer := [0-9]+ S
	private State DoParseIntegerRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoRepetition(s, r, 1, 2147483647,
				(s2, r2) => DoParseRange(s2, r2, false, string.Empty, "09", null, "[0-9]")),
			(s, r) => DoParse(s, r, "S"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "integer";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// Literal := '\'' ('\\\'' / '\x5c\x5c' / [^'])+ '\'' S
	private State DoParseLiteral1Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParseLiteral(s, r, "\'"),
			(s, r) => DoRepetition(s, r, 1, 2147483647,
				(s2, r2) => DoChoice(s2, r2,
					(s3, r3) => DoParseLiteral(s3, r3, "\\\'"),
					(s3, r3) => DoParseLiteral(s3, r3, "\x5c\x5c"),
					(s3, r3) => DoParseRange(s3, r3, true, "'", string.Empty, null, "[^']"))),
			(s, r) => DoParseLiteral(s, r, "\'"),
			(s, r) => DoParse(s, r, "S"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			string text = m_input.Substring(_start.Index, _state.Index - _start.Index);
			string literal = text.Trim(); value = new LiteralExpression(literal.Substring(1, literal.Length - 2));
			if (text != null)
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "literal";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// Literal := '"' ('\\"' / '\x5c\x5c' / [^\"])+ '"' S
	private State DoParseLiteral2Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParseLiteral(s, r, "\""),
			(s, r) => DoRepetition(s, r, 1, 2147483647,
				(s2, r2) => DoChoice(s2, r2,
					(s3, r3) => DoParseLiteral(s3, r3, "\\\""),
					(s3, r3) => DoParseLiteral(s3, r3, "\x5c\x5c"),
					(s3, r3) => DoParseRange(s3, r3, true, "\"", string.Empty, null, "[^\"]"))),
			(s, r) => DoParseLiteral(s, r, "\""),
			(s, r) => DoParse(s, r, "S"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			string text = m_input.Substring(_start.Index, _state.Index - _start.Index);
			string literal = text.Trim(); value = new LiteralExpression(literal.Substring(1, literal.Length - 2));
			if (text != null)
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "literal";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// PegFile := S (Setting / Comment)+ (Rule / Comment)+
	private State DoParsePegFileRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParse(s, r, "S"),
			(s, r) => DoRepetition(s, r, 1, 2147483647,
				(s2, r2) => DoChoice(s2, r2,
					(s3, r3) => DoParse(s3, r3, "Setting"),
					(s3, r3) => DoParse(s3, r3, "Comment"))),
			(s, r) => DoRepetition(s, r, 1, 2147483647,
				(s2, r2) => DoChoice(s2, r2,
					(s3, r3) => DoParse(s3, r3, "Rule"),
					(s3, r3) => DoParse(s3, r3, "Comment"))));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// PostfixExpression := PrimitiveExpression '{' S Integer ',' S Integer '}' S
	private State DoParsePostfixExpression1Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParse(s, r, "PrimitiveExpression"),
			(s, r) => DoParseLiteral(s, r, "{"),
			(s, r) => DoParse(s, r, "S"),
			(s, r) => DoParse(s, r, "Integer"),
			(s, r) => DoParseLiteral(s, r, ","),
			(s, r) => DoParse(s, r, "S"),
			(s, r) => DoParse(s, r, "Integer"),
			(s, r) => DoParseLiteral(s, r, "}"),
			(s, r) => DoParse(s, r, "S"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = new RepetitionExpression(results[0].Value, int.Parse(results[2].Text), int.Parse(results[4].Text));
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// PostfixExpression := PrimitiveExpression '{' S Integer ',' S '}' S
	private State DoParsePostfixExpression2Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParse(s, r, "PrimitiveExpression"),
			(s, r) => DoParseLiteral(s, r, "{"),
			(s, r) => DoParse(s, r, "S"),
			(s, r) => DoParse(s, r, "Integer"),
			(s, r) => DoParseLiteral(s, r, ","),
			(s, r) => DoParse(s, r, "S"),
			(s, r) => DoParseLiteral(s, r, "}"),
			(s, r) => DoParse(s, r, "S"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = new RepetitionExpression(results[0].Value, int.Parse(results[2].Text), int.MaxValue);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// PostfixExpression := PrimitiveExpression '*' S
	private State DoParsePostfixExpression3Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParse(s, r, "PrimitiveExpression"),
			(s, r) => DoParseLiteral(s, r, "*"),
			(s, r) => DoParse(s, r, "S"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = new RepetitionExpression(results[0].Value, 0, int.MaxValue);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// PostfixExpression := PrimitiveExpression '+' S
	private State DoParsePostfixExpression4Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParse(s, r, "PrimitiveExpression"),
			(s, r) => DoParseLiteral(s, r, "+"),
			(s, r) => DoParse(s, r, "S"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = new RepetitionExpression(results[0].Value, 1, int.MaxValue);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// PostfixExpression := PrimitiveExpression '?' S
	private State DoParsePostfixExpression5Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParse(s, r, "PrimitiveExpression"),
			(s, r) => DoParseLiteral(s, r, "?"),
			(s, r) => DoParse(s, r, "S"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = new RepetitionExpression(results[0].Value, 0, 1);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// PostfixExpression := PrimitiveExpression
	private State DoParsePostfixExpression6Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoParse(_state, results, "PrimitiveExpression");
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// PrimitiveExpression := Any / Literal / Range / SubRule / SubExpression
	private State DoParsePrimitiveExpressionRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoChoice(_state, results,
			(s, r) => DoParse(s, r, "Any"),
			(s, r) => DoParse(s, r, "Literal"),
			(s, r) => DoParse(s, r, "Range"),
			(s, r) => DoParse(s, r, "SubRule"),
			(s, r) => DoParse(s, r, "SubExpression"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Range := '[' ('\\]' / '\\\\' / [^\\]])+ ']' S
	private State DoParseRangeRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParseLiteral(s, r, "["),
			(s, r) => DoRepetition(s, r, 1, 2147483647,
				(s2, r2) => DoChoice(s2, r2,
					(s3, r3) => DoParseLiteral(s3, r3, "\\]"),
					(s3, r3) => DoParseLiteral(s3, r3, "\\\\"),
					(s3, r3) => DoParseRange(s3, r3, true, "]", string.Empty, null, "[^\\]]"))),
			(s, r) => DoParseLiteral(s, r, "]"),
			(s, r) => DoParse(s, r, "S"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			string fatal = null;
			string text = m_input.Substring(_start.Index, _state.Index - _start.Index);
			fatal = DoRange(text, ref value);
			if (!string.IsNullOrEmpty(fatal))
				DoThrow(_start.Index, fatal);
			if (text != null)
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "range literal";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// Rule := Identifier ':=' S Expression (';' / (Action S Action?)) S
	private State DoParseRuleRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParse(s, r, "Identifier"),
			(s, r) => DoParseLiteral(s, r, ":="),
			(s, r) => DoParse(s, r, "S"),
			(s, r) => DoParse(s, r, "Expression"),
			(s, r) => DoChoice(s, r,
				(s2, r2) => DoParseLiteral(s2, r2, ";"),
				(s2, r2) => DoSequence(s2, r2,
					(s3, r3) => DoParse(s3, r3, "Action"),
					(s3, r3) => DoParse(s3, r3, "S"),
					(s3, r3) => DoRepetition(s3, r3, 0, 1,
						(s4, r4) => DoParse(s4, r4, "Action")))),
			(s, r) => DoParse(s, r, "S"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			DoAddRule(results);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// S := Space*
	private State DoParseSRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoRepetition(_state, results, 0, 2147483647,
			(s, r) => DoParse(s, r, "Space"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			string text = m_input.Substring(_start.Index, _state.Index - _start.Index);
			text = null;
			if (text != null)
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// SequenceExpression := AssertExpression+
	private State DoParseSequenceExpressionRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoRepetition(_state, results, 1, 2147483647,
			(s, r) => DoParse(s, r, "AssertExpression"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = DoSequence(results);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Setting := Identifier '=' [ ]* ('\n' / '\r' / '\t') S
	private State DoParseSetting1Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParse(s, r, "Identifier"),
			(s, r) => DoParseLiteral(s, r, "="),
			(s, r) => DoRepetition(s, r, 0, 2147483647,
				(s2, r2) => DoParseRange(s2, r2, false, " ", string.Empty, null, "[ ]")),
			(s, r) => DoChoice(s, r,
				(s2, r2) => DoParseLiteral(s2, r2, "\n"),
				(s2, r2) => DoParseLiteral(s2, r2, "\r"),
				(s2, r2) => DoParseLiteral(s2, r2, "\t")),
			(s, r) => DoParse(s, r, "S"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			string fatal = null;
			fatal = DoAddSetting(results[0].Text.Trim(), string.Empty);
			if (!string.IsNullOrEmpty(fatal))
				DoThrow(_start.Index, fatal);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "setting";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// Setting := Identifier '=' S Value ('\n' / '\r' / '\t') S
	private State DoParseSetting2Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParse(s, r, "Identifier"),
			(s, r) => DoParseLiteral(s, r, "="),
			(s, r) => DoParse(s, r, "S"),
			(s, r) => DoParse(s, r, "Value"),
			(s, r) => DoChoice(s, r,
				(s2, r2) => DoParseLiteral(s2, r2, "\n"),
				(s2, r2) => DoParseLiteral(s2, r2, "\r"),
				(s2, r2) => DoParseLiteral(s2, r2, "\t")),
			(s, r) => DoParse(s, r, "S"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			string fatal = null;
			fatal = DoAddSetting(results);
			if (!string.IsNullOrEmpty(fatal))
				DoThrow(_start.Index, fatal);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "setting";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// Space := [ \t\r\n]
	private State DoParseSpaceRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoParseRange(_state, results, false, " \t\r\n", string.Empty, null, "[ \t\r\n]");
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "whitespace";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// SubExpression := '(' S Expression ')' S
	private State DoParseSubExpressionRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoSequence(_state, results,
			(s, r) => DoParseLiteral(s, r, "("),
			(s, r) => DoParse(s, r, "S"),
			(s, r) => DoParse(s, r, "Expression"),
			(s, r) => DoParseLiteral(s, r, ")"),
			(s, r) => DoParse(s, r, "S"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = results[1].Value;
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "parenthesized expression";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// SubRule := Identifier
	private State DoParseSubRuleRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoParse(_state, results, "Identifier");
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			string text = m_input.Substring(_start.Index, _state.Index - _start.Index);
			value = new RuleExpression(text.Trim());
			if (text != null)
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "rule name";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// Value := [^\t\n\r]+
	private State DoParseValueRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		var results = new List<Result>();
		
		_state = DoRepetition(_state, results, 1, 2147483647,
			(s, r) => DoParseRange(s, r, true, "\t\n\r", string.Empty, null, "[^\t\n\r]"));
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	#endregion
	
	#region Private Helper Methods
	partial void OnCtorEpilog();
	partial void OnParseProlog();
	partial void OnParseEpilog(State state);
	
	public string DoEscapeAll(string s)
	{
		var builder = new System.Text.StringBuilder(s.Length);
		
		foreach (char ch in s)
		{
			if (ch == '\n')
				builder.Append("\\n");
			
			else if (ch == '\r')
				builder.Append("\\r");
			
			else if (ch == '\t')
				builder.Append("\\t");
			
			else if (ch < ' ')
				builder.AppendFormat("\\x{0:X2}", (int) ch);
			
			else
				builder.Append(ch);
		}
		
		return builder.ToString();
	}
	
	// This is normally only used for error handling so it doesn't need to be too
	// fast. If it somehow does become a bottleneck for some parsers they can
	// replace it with the custom-methods setting.
	private int DoGetLine(int index)
	{
		int line = 1;
		
		int i = 0;
		while (i <= index)
		{
			char ch = m_input[i++];
			
			if (ch == '\r' && m_input[i] == '\n')
			{
				++i;
				++line;
			}
			else if (ch == '\r')
			{
				++line;
			}
			else if (ch == '\n')
			{
				++line;
			}
		}
		
		return line;
	}
	
	private int DoGetCol(int index)
	{
		int start = index;
		
		while (index > 0 && m_input[index - 1] != '\n' && m_input[index - 1] != '\r')
		{
			--index;
		}
		
		return start - index + 1;
	}
	
	private void DoThrow(int index, string format, params object[] args)
	{
		int line = DoGetLine(index);
		int col = DoGetCol(index);
	
		// We need this retarded if or string.Format will throw an error if it
		// gets a format string like "Expected { or something".
		if (args != null && args.Length > 0)
			throw new ParserException(line, col, m_file, DoEscapeAll(string.Format(format, args)));
		else
			throw new ParserException(line, col, m_file, DoEscapeAll(format));
	}
	
	private State DoParseLiteral(State state, List<Result> results, string literal)
	{
		int j = state.Index;
		
		for (int i = 0; i < literal.Length; ++i)
		{
			if (m_input[j + i] != literal[i])
			{
				return new State(state.Index, false, ErrorSet.Combine(state.Errors, new ErrorSet(state.Index, literal)));
			}
		}
		
		int k = j + literal.Length;
		
		results.Add(new Result(this, j, literal.Length, m_input, default(Expression)));
		state = new State(k, true, state.Errors);
		
		return state;
	}
	
	private State DoParse(State state, List<Result> results, string nonterminal)
	{
		State start = state;
		
		CacheValue cache;
		CacheKey key = new CacheKey(nonterminal, start.Index);
		if (!m_cache.TryGetValue(key, out cache))
		{
			ParseMethod[] methods = m_nonterminals[nonterminal];
			
			int oldCount = results.Count;
			state = DoChoice(state, results, methods);
			
			bool hasResult = state.Parsed && results.Count > oldCount;
			Expression value = hasResult ? results[results.Count - 1].Value : default(Expression);
			cache = new CacheValue(state, value, hasResult);
			m_cache.Add(key, cache);
		}
		else
		{
			if (cache.HasResult)
				results.Add(new Result(this, start.Index, cache.State.Index - start.Index, m_input, cache.Value));
		}
		
		return cache.State;
	}
	
	private State DoChoice(State state, List<Result> results, params ParseMethod[] methods)
	{
		State start = state;
		int startResult = results.Count;
		
		foreach (ParseMethod method in methods)
		{
			State temp = method(state, results);
			if (temp.Parsed)
			{
				state = temp;
				break;
			}
			else
			{
				state = new State(start.Index, false, ErrorSet.Combine(state.Errors, temp.Errors));
				results.RemoveRange(startResult, results.Count - startResult);
			}
		}
		
		return state;
	}
	
	private State DoSequence(State state, List<Result> results, params ParseMethod[] methods)
	{
		State start = state;
		int startResult = results.Count;
		
		foreach (ParseMethod method in methods)
		{
			State temp = method(state, results);
			if (temp.Parsed)
			{
				state = temp;
			}
			else
			{
				state = new State(start.Index, false, ErrorSet.Combine(start.Errors, temp.Errors));
				results.RemoveRange(startResult, results.Count - startResult);
				break;
			}
		}
		
		return state;
	}
	
	private State DoRepetition(State state, List<Result> results, int min, int max, ParseMethod method)
	{
		State start = state;
		
		int count = 0;
		while (count <= max)
		{
			State temp = method(state, results);
			if (temp.Parsed && temp.Index > state.Index)
			{
				state = temp;
				++count;
			}
			else
			{
				state = new State(state.Index, true, ErrorSet.Combine(state.Errors, temp.Errors));
				break;
			}
		}
		
		if (count < min || count > max)
			state = new State(start.Index, false, ErrorSet.Combine(start.Errors, state.Errors));
		
		return state;
	}
	
	private State DoParseRange(State state, List<Result> results, bool inverted, string chars, string ranges, UnicodeCategory[] categories, string label)
	{
		char ch = m_input[state.Index];
		
		bool matched = chars.IndexOf(ch) >= 0;
		for (int i = 0; i < ranges.Length && !matched; i += 2)
		{
			matched = ranges[i] <= ch && ch <= ranges[i + 1];
		}
		for (int i = 0; categories != null && i < categories.Length && !matched; ++i)
		{
			matched = char.GetUnicodeCategory(ch) == categories[i];
		}
		
		if (inverted)
			matched = !matched && ch != '\x0';
		
		if (matched)
		{
			results.Add(new Result(this, state.Index, 1, m_input, default(Expression)));
			return new State(state.Index + 1, true, state.Errors);
		}
		
		return new State(state.Index, false, ErrorSet.Combine(state.Errors, new ErrorSet(state.Index, label)));
	}
	#endregion
	
	#region Private Types
	private struct CacheKey : IEquatable<CacheKey>
	{
		public CacheKey(string rule, int index)
		{
			m_rule = rule;
			m_index = index;
		}
		
		public override bool Equals(object obj)
		{
			if (obj == null)
				return false;
			
			if (GetType() != obj.GetType())
				return false;
			
			CacheKey rhs = (CacheKey) obj;
			return this == rhs;
		}
		
		public bool Equals(CacheKey rhs)
		{
			return this == rhs;
		}
		
		public static bool operator==(CacheKey lhs, CacheKey rhs)
		{
			if (lhs.m_rule != rhs.m_rule)
				return false;
			
			if (lhs.m_index != rhs.m_index)
				return false;
			
			return true;
		}
		
		public static bool operator!=(CacheKey lhs, CacheKey rhs)
		{
			return !(lhs == rhs);
		}
		
		public override int GetHashCode()
		{
			int hash = 0;
			
			unchecked
			{
				hash += m_rule.GetHashCode();
				hash += m_index.GetHashCode();
			}
			
			return hash;
		}
		
		private string m_rule;
		private int m_index;
	}
	
	private struct CacheValue
	{
		public CacheValue(State state, Expression value, bool hasResult)
		{
			State = state;
			Value = value;
			HasResult = hasResult;
		}
		
		public State State {get; private set;}
		
		public Expression Value {get; private set;}
		
		public bool HasResult {get; private set;}
	}
	
	private delegate State ParseMethod(State state, List<Result> results);
	
	// These are either an error that caused parsing to fail or the reason a
	// successful parse stopped.
	private struct ErrorSet
	{
		public ErrorSet(int index, string expected)
		{
			Index = index;
			Expected = new string[]{expected};
		}
		
		public ErrorSet(int index, string[] expected)
		{
			Index = index;
			Expected = expected;
		}
		
		// The location associated with the errors. For a failed parse this will be the
		// same as State.Index. For a successful parse it will be State.Index or later.
		public int Index {get; private set;}
		
		// This will be the name of something which was expected, but not found.
		public string[] Expected {get; private set;}
		
		public static ErrorSet Combine(ErrorSet lhs, ErrorSet rhs)
		{
			if (lhs.Index > rhs.Index)
			{
				return lhs;
			}
			else if (lhs.Index < rhs.Index)
			{
				return rhs;
			}
			else
			{
				var errors = new List<string>(lhs.Expected.Length + rhs.Expected.Length);
				errors.AddRange(lhs.Expected);
				foreach (string err in rhs.Expected)
				{
					if (errors.IndexOf(err) < 0)
						errors.Add(err);
				}
				return new ErrorSet(lhs.Index, errors.ToArray());
			}
		}
		
		public override string ToString()
		{
			if (Expected.Length > 0)
				return string.Format("Expected {0}", string.Join(" or ", Expected));
			else
				return "<none>";
		}
	}
	
	// The state of the parser.
	private struct State
	{
		public State(int index, bool parsed)
		{
			Index = index;
			Parsed = parsed;
			Errors = new ErrorSet(index, new string[0]);
		}
		
		public State(int index, bool parsed, ErrorSet errors)
		{
			Index = index;
			Parsed = parsed;
			Errors = errors;
		}
		
		// Index of the first unconsumed character.
		public int Index {get; private set;}
		
		// True if the expression associated with the state successfully parsed.
		public bool Parsed {get; private set;}
		
		// If Parsed is false then this will explain why. If Parsed is true it will
		// say why the parse stopped.
		public ErrorSet Errors {get; private set;}
	}
	
	// The result of parsing a literal or non-terminal.
	private struct Result
	{
		public Result(Parser parser, int index, int length, string input, Expression value)
		{
			m_parser = parser;
			m_index = index;
			m_length = length;
			m_input = input;
			Value = value;
		}
		
		// The text which was parsed by the terminal or non-terminal.
		public string Text {get {return m_input.Substring(m_index, m_length);}}
		
		// The 1-based line number the (non)terminal started on.
		public int Line {get {return m_parser.DoGetLine(m_index);}}
		
		// The 1-based column number the (non)terminal started on.
		public int Col {get {return m_parser.DoGetCol(m_index);}}
		
		// For non-terminals this will be the result of the semantic action, 
		// otherwise it will be the default value.
		public Expression Value {get; private set;}
		
		private Parser m_parser;
		private int m_index;
		private int m_length;
		private string m_input;
	}
	
	#endregion
	
	#region Fields
	private string m_input;
	private string m_file;
	private Dictionary<string, ParseMethod[]> m_nonterminals = new Dictionary<string, ParseMethod[]>();
	private Dictionary<CacheKey, CacheValue> m_cache = new Dictionary<CacheKey, CacheValue>();
	#endregion
}
