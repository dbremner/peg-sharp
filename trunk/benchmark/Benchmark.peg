# Grammar for a simple expression oriented language where all# the values are integers.start = Programvalue = stringdebug = none# ProgramProgram := S Statements	`value = results[0].Text`# "Statements"Assignment := Identifier '=' S Expression;If := 'if' S Expression 'then' S Statements 'else' S Statements 'end' S;Statement := If / While / Assignment / Expression;Statements := Statement+;While := 'while' S Expression 'do' S Statements 'end' S;# ExpressionsCompare := Sum (('<=' / '>=' / '==' / '!=' / '<' / '>') S Sum)?;Expression := Compare;Identifier := !Keywords [a-zA-Z] [a-zA-Z0-9]* S;Sum := Product (('+' / '-') S Product)* ;Product := Value (('*' / '/') S Value)* ;Value := [0-9]+ S;Value := Identifier;Value := '(' Expression ')' S;# ScaffoldingKeywords := ('do' / 'else' / 'end' / 'if' / 'then' / 'while') ![a-zA-Z0-9];S := Space*;Space := [ \t\r\n];