http://pdos.csail.mit.edu/~baford/packrat/http://www.codeproject.com/KB/recipes/grammar_support_1.aspxhttp://www.replicator.org/node/67http://www.codeplex.com/ironyhttp://www.eqatec.com/tools/profilerhttp://code.google.com/p/nprof/ms (but team version)http://www.wikihow.com/Optimize-Your-Program%27s-Performancehttp://stackoverflow.com/questions/375913/what-can-i-use-to-profile-c-code-in-linux/378024#378024http://www.thinkingparallel.com/2007/04/18/ten-questions-with-joe-duffy-about-parallel-programming-and-net-threads/CodeRule: Indent		# matches m_indent spaces (or maybe acts like an assert)Statements :< int oldIndent = m_indent; DoIncreaseIndent();	# fails if new indent is not greater than currentStatements := Statement+Statements :> m_indent = oldIndent;		Statement := AssertIndent 'if' Expr Statements* Work on a SignificantWhitespace test:	- prolog rules can't be memoized? maybe State can have a prolog failed flag	- :< is prolog code	- :> is epilog code	- may want a style for these	- may also want to include the lang file	- CodeRule: names a method that is called within a production	- get the test working	- document the new stuff	- :>= is epilog code for the parsed case	- :>!= is epilog code for the not-parsed case	- document the new stuff (hooks, new grammar, new fail local)* May want to use a debug display like:\t\nFoo = (x + y)     ---^ Identifier     ...Foo Bar Identifier\t\nFoo = (x + y)     ^--- Identifier failed (expected whitespace)     - maybe enable these with debug-matches and debug-failures* Might want some tips & techniques ftests.* Might be neat to allow peg-sharp to create dot files (using graphviz)* Maybe also rtf generation* Look into optionally generating c++ code.* Might want to consolidate ftests into a single executable.* Do a release.* Should there be an explicit way to match eot?* Might be nice to add some support for error recovery so multiple parse errors can be   reported. See Bison's simple error recovery.* Would be nice to support #if stuff.* May want to support utf-16 (could look for zeros or a bom).* Might want a --setting switch. Should override earlier switches and peg file settings.* Allow arbitrary sequences (instead of just strings) to be parsed?* Would be nice if we could do optimizations like rule inlining but this is tricky with the   way we handle semantic actions (they are attached to rules not expressions, rely on   the order of expressions within the rule, and default to returning the value of the   first subrule).* Release checklist:	- make sure the csproj has the right version	- make sure sln still builds	