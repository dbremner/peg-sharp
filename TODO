http://pdos.csail.mit.edu/~baford/packrat/http://www.codeproject.com/KB/recipes/grammar_support_1.aspxhttp://www.replicator.org/node/67http://www.codeplex.com/ironyhttp://www.eqatec.com/tools/profilerhttp://code.google.com/p/nprof/ms (but team version)http://www.wikihow.com/Optimize-Your-Program%27s-Performancehttp://stackoverflow.com/questions/375913/what-can-i-use-to-profile-c-code-in-linux/378024#378024http://www.thinkingparallel.com/2007/04/18/ten-questions-with-joe-duffy-about-parallel-programming-and-net-threads/GoD2rustGelman's Bayesian Data AnalysisJayne's Probability theory: the Logic of ScienceStatistical Computing: An Introduction to Data Analysis using S-Plus (has written books with R too)Language Implementation Patterns¬†The Golden Compass* Parse files should not be checked into svn.* Get rid of the make files in the ftest directories.* Work on windows support:	- do something about windows functional testing		- might want to update docs for windows	* Work on optimization:	- get a test case suitable to use for benchmarking	- get a base line	- do some profiling	- could inline simple rules (eg Space) before they are written	- could get rid of helpers like DoSequence	- look into using pointers to avoid string [] range checks	- [...] / [...]* Look into optionally generating c++ code.* Do a release.* Should there be an explicit way to match eot?* Might be nice to add some support for error recovery so multiple parse errors can be   reported. See Bison's simple error recovery.* Would be nice to support #if stuff.* Might want a --setting switch. Should override earlier switches and peg file settings.* Allow arbitrary sequences (instead of just strings) to be parsed?* Release checklist:	- make sure the csproj has the right version	- make sure sln still builds	 /Users/jessejones/Documents/Developer/UnixNotes.sh /Users/jessejones/Documents/Developer/c#.cs e{0,x} always matchese{0,0} always matches never consumes input