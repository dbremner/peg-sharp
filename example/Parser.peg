# Grammar for arithmetic expressions which may contain variables.# Used by peg-sharp to generate the Parser class.start = Startvalue = Expressiondebug = false# StartStart := S (Assignment / Expression);Assignment := Identifier '=' S Expression `value = new AssignmentExpression(results[0].Text.Trim(), results[2].Value)`# ExpressionsExpression := Sum;Identifier := [a-zA-Z$] [a-zA-Z0-9]* S `value = new VariableExpression(text.Trim())` `expected = "variable"`Sum := Product (('+' / '-') S Product)*  `value = DoCreateBinary(results)`Product := Value (('*' / '/') S Value)*  `value = DoCreateBinary(results)`Value := [0-9]+ '.' [0-9]+ (('e' / 'E') [0-9]+)? S `value = new FloatExpression(text.Trim())` `expected = "number"`Value := [0-9]+ ('e' / 'E') [0-9]+ S `value = new FloatExpression(text.Trim())` `expected = "number"`Value := [0-9]+ S `value = new IntegerExpression(text.Trim())` `expected = "number"`Value := Identifier;Value := '(' Expression ')' S `value = results[1].Value` `expected = "parenthesized expression"`# ScaffoldingS := Space* `text = null`  # We use a separate space rule because x* always succeeds.Space := [ \t\r\n] `;` `expected = "whitespace"`